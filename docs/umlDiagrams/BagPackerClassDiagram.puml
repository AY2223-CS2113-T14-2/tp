@startuml
'https://plantuml.com/sequence-diagram
### Command Mechanisms:
For all valid commands, the mechanism of implementation are as follows:
1. Read input - ```runBagPacker()``` method in ```BagPacker``` calls the ```Parser``` class to read user input command
2. Create command object - The ```Parser``` class creates a corresponding command object of the relevant command
3. Execute command object - ```runBagPacker()``` method executes the ```.execute()``` method (overridden by child classes) of the command object
   which runs the actual command function
autonumber

@startuml
skinparam linetype polyline
hide circle
namespace packingfunc #DDDDDD {
    class Item{
    packedQuantity: int
    totalQuantity: int
    itemName: String
    }
    class "<<static>>\nPackingList" as PackingList{
    itemList: ArrayList<Item>
    }
}
class BagPacker{
runBagPacker():void
}
namespace iohandler #DDDAAA {
    class Parser{
    parse():void
    }
    class Storage{
            save():void
            load():void
        }
    class Ui{
            initialMessage():void
            errorMessage():void
            helpMessage():void
            printToUser():void
    }
}
note "Ui class is associated with all child classes \nof Command class these association lines \nare omitted to reduce mess" as uiNote
uiNote .[Hidden] Ui
namespace commands {
    class "{Abstract}\nCommand" as Command{
    execute(<<static>> PackingList):void
    }
    note right
    Omitted some child commands to avoid clutter
    (DeleteList, Help, UnpackAll, ListUnpacked,
    and Incorrect Command)
    end note
    skinparam groupInheritance 2

    class AddCommand extends Command
    class DeleteCommand extends Command
    class ListCommand extends Command
    class ByeCommand extends Command
    class EditQuantity extends Command
    class FindCommand extends Command
    class HelpCommand extends Command
    class PackCommand extends Command
    class UnpackCommand extends Command
}
BagPacker "App 1" --> "1..*" Parser : Parse user \ninput >
BagPacker "1" --> "1" Storage : Manage saved data upon \ninitialisation and closing >
BagPacker "1" --> "*" Ui : Send message \nto CLI using >
PackingList "1" *-- "*" Item : packing list composed of items >
Parser "Parser 1" --> "1" Command : Parser creates relevant Command >

@enduml