diff --git a/docs/DeveloperGuide.md b/docs/DeveloperGuide.md
index 30cb13b..8a04594 100644
--- a/docs/DeveloperGuide.md
+++ b/docs/DeveloperGuide.md
@@ -22,23 +22,6 @@ Add command is used to add a quantity of item(s) to the packing list.
 Mechanism: ```AddCommand.execute()``` calls the ```PackingList.addItem()``` method from the ```PackingList``` class which executes the ```ArrayList.add()``` method to add the item to the ```PackingList``` ArrayList. 
 It then updates the ```quantity``` variable according to the quantity inputted by the user.
 
-
-#### Preventing duplicate items
-
-When using the `add` function, we have decided to implement a passive function that checks whether the item with the same name already exists in the packingList.
-
-This is done through the `contains()` method in class `PackingList()`, which is called during `execute` in an `AddCommand` object.
-
-Below is the UML diagram showing what occurs during `add` function.
-![img_1.png](img_1.png)
-When `execute()` is called in `a`(object of class `AddCommand`), the `addItem(item)` method is called in the object `packingList`. This method will see if method `contains()` will return `true`.
-
-The `contains()` method, which is shown as a reference on the right of the UML diagram, is a boolean method that loops through all items in the packingList, and returns `true` if any of the existing items have the same description as the item to be added in `toAdd`, and `false` otherwise.
-
-When `contains()` returns `true`, method `addItem(item)` will be interrupted and a `DuplicateItemException` will be thrown from `packingList`, which will be caught by `a`. If `contains()` returns false, the item will be added onto `packingList`.
-
-In both scenarios, `ui.printToUser` will be called to print a message to the user. In the former case, `ExistItemError` will be printed, while `AddSuccess` will be shown if the item was added with no issues.
-
 #### Delete Command
 
 Delete command is used to delete an item from the packing list.
@@ -68,7 +51,6 @@ All Commands:
 6. bye : Stops the BagPacker Application
 	Example: bye
 ____________________________________________________________
-
 ```
 
 #### Bye Command
@@ -91,9 +73,27 @@ This will execute the ```setPacked()``` method to set the value of the boolean `
 
 #### Unpack Command
 ```Unpack Command``` is used to mark an item in the list as unpacked.
+
 Mechanism: ```UnpackCommand.execute()``` calls the ```PackingList.unpackItem()``` method from the ```PackingList``` class.
 This will execute the ```setPacked``` method to set the value of the boolean ```isPacked``` to be ```false```, and mark the item as unpacked in the ```PackingList``` ArrayList.
 
+
+### [Proposed] No Duplicate Items #### Preventing duplicate items
+
+When using the `add` function, we have decided to implement a passive function that checks whether the item with the same name already exists in the packingList.
+
+This is done through the `contains()` method in class `PackingList()`, which is called during `execute` in an `AddCommand` object.
+
+Below is the UML diagram showing what occurs during `add` function.
+![img_2.png](img_2.png)
+When `execute()` is called in `a`(object of class `AddCommand`), the `addItem(item)` method is called in the object `packingList`. This method will see if method `contains()` will return `true`.
+
+The `contains()` method, which is shown as a reference on the right of the UML diagram, is a boolean method that loops through all items in the packingList, and returns `true` if any of the existing items have the same description as the item to be added in `toAdd`, and `false` otherwise.
+
+When `contains()` returns `true`, method `addItem(item)` will be interrupted and a `DuplicateItemException` will be thrown from `packingList`, which will be caught by `a`. If `contains()` returns false, the item will be added onto `packingList`.
+
+In both scenarios, `ui.printToUser` will be called to print a message to the user. In the former case, `ExistItemError` will be printed, while `AddSuccess` will be shown if the item was added with no issues.
+
 ## Product scope
 
 ### Target user profile
diff --git a/docs/img_1.png b/docs/img_1.png
deleted file mode 100644
index 6899bf1..0000000
Binary files a/docs/img_1.png and /dev/null differ
diff --git a/src/main/java/bagpacker/BagPacker.java b/src/main/java/bagpacker/BagPacker.java
index ce64d96..7fe2678 100644
--- a/src/main/java/bagpacker/BagPacker.java
+++ b/src/main/java/bagpacker/BagPacker.java
@@ -8,6 +8,7 @@ import bagpacker.packingfunc.PackingList;
 
 public class BagPacker {
     private static PackingList packingList;
+
     /**
      * Main entry-point for the java.BagPacker application.
      */
diff --git a/src/main/java/bagpacker/commands/AddCommand.java b/src/main/java/bagpacker/commands/AddCommand.java
index 3e73fc1..1042555 100644
--- a/src/main/java/bagpacker/commands/AddCommand.java
+++ b/src/main/java/bagpacker/commands/AddCommand.java
@@ -7,7 +7,7 @@ import bagpacker.packingfunc.PackingList;
 public class AddCommand extends Command {
     public static final String MSG_SUCCESS_ADD = "New item added: %s";
     public static final String HELP_MSG = "add : Adds an item to the packing list.\n" +
-                "\tExample: add toothbrush";
+            "\tExample: add toothbrush";
 
     private final Item item;
 
diff --git a/src/main/java/bagpacker/commands/ByeCommand.java b/src/main/java/bagpacker/commands/ByeCommand.java
index 1da5969..b5616f2 100644
--- a/src/main/java/bagpacker/commands/ByeCommand.java
+++ b/src/main/java/bagpacker/commands/ByeCommand.java
@@ -9,7 +9,8 @@ public class ByeCommand extends Command {
     public static boolean isBagPackerRunning = true;
     public static final String HELP_MSG = "bye : Stops the BagPacker Application\n" +
             "\tExample: bye";
-    public void execute (PackingList packingList) {
+
+    public void execute(PackingList packingList) {
         this.isBagPackerRunning = false;
     }
 }
diff --git a/src/main/java/bagpacker/commands/Command.java b/src/main/java/bagpacker/commands/Command.java
index b3ce81b..967691f 100644
--- a/src/main/java/bagpacker/commands/Command.java
+++ b/src/main/java/bagpacker/commands/Command.java
@@ -37,13 +37,12 @@ public abstract class Command {
         return packingList.get(getTargetIndex() - 1);
     }
 
-
     /**
      * Executes the command which requires a packingList
      *
      * @param packingList used to execute the command
      */
-    public void execute (PackingList packingList) {
+    public void execute(PackingList packingList) {
     }
 
 }
diff --git a/src/main/java/bagpacker/commands/DeleteListCommand.java b/src/main/java/bagpacker/commands/DeleteListCommand.java
index ea4ea80..90992d8 100644
--- a/src/main/java/bagpacker/commands/DeleteListCommand.java
+++ b/src/main/java/bagpacker/commands/DeleteListCommand.java
@@ -8,13 +8,11 @@ import java.util.ArrayList;
 
 public class DeleteListCommand extends Command {
     public static final String MSG_SUCCESS_DELETE_LIST = "list deleted";
+
     @Override
     public void execute(PackingList packingList) {
-        ArrayList< Item > emptyList = new ArrayList<>();
+        ArrayList<Item> emptyList = new ArrayList<>();
         packingList.setItemList(emptyList);
         Ui.printToUser(String.format(MSG_SUCCESS_DELETE_LIST));
     }
-
-
-
 }
diff --git a/src/main/java/bagpacker/commands/IncorrectCommand.java b/src/main/java/bagpacker/commands/IncorrectCommand.java
index 4932cb1..038cec6 100644
--- a/src/main/java/bagpacker/commands/IncorrectCommand.java
+++ b/src/main/java/bagpacker/commands/IncorrectCommand.java
@@ -6,6 +6,7 @@ import bagpacker.packingfunc.PackingList;
 public class IncorrectCommand extends Command {
     private final String errorType;
     private final String helpMessage;
+
     public IncorrectCommand(String errorType, String helpMessage) {
         this.helpMessage = helpMessage;
         this.errorType = errorType;
diff --git a/src/main/java/bagpacker/commands/ListCommand.java b/src/main/java/bagpacker/commands/ListCommand.java
index 279520a..bf66f3e 100644
--- a/src/main/java/bagpacker/commands/ListCommand.java
+++ b/src/main/java/bagpacker/commands/ListCommand.java
@@ -19,14 +19,8 @@ public class ListCommand extends Command {
         System.out.println("____________________________________________________________");
         System.out.println("Here are the items in your list");
         for (int i = 0; i < packingList.size(); i++) {
-            String isItemPacked;
-            if (packingList.get(i).getIsPacked()) {
-                isItemPacked = "X";
-            } else {
-                isItemPacked = " ";
-            }
-            String itemName = packingList.get(i).getItemName();
-            System.out.println((i + 1) + ". [" + isItemPacked + "] " + itemName);
+            System.out.print((i + 1) + ". ");
+            System.out.println(PackingList.get(i));
         }
         System.out.println("____________________________________________________________");
     }
diff --git a/src/main/java/bagpacker/commands/PackCommand.java b/src/main/java/bagpacker/commands/PackCommand.java
index fb7b0c8..5c8f69b 100644
--- a/src/main/java/bagpacker/commands/PackCommand.java
+++ b/src/main/java/bagpacker/commands/PackCommand.java
@@ -7,14 +7,16 @@ import bagpacker.packingfunc.PackingList;
 public class PackCommand extends Command {
 
     public static final String MSG_SUCCESS_PACK = "Item packed: %s";
-    public static final String HELP_MSG= "pack : Marks an item as packed in the packing list.\n" +
+    public static final String HELP_MSG = "pack : Marks an item as packed in the packing list.\n" +
             "\tExample: pack 2 of 3\n" +
             "\tMeaning: packs 2 quantities of the third item in the packing list";
 
+    private static int packQuantity;
 
-    public PackCommand(int targetIndex) {
+    public PackCommand(int quantity, int targetIndex) {
         super(targetIndex);
-        assert (targetIndex >= 1 & targetIndex <= PackingList.getItemList().size()):
+        packQuantity = quantity;
+        assert (targetIndex >= 1 & targetIndex <= PackingList.getItemList().size()) :
                 "Pack Command Target index is out of bounds";
     }
 
@@ -22,7 +24,7 @@ public class PackCommand extends Command {
     public void execute(PackingList packingList) {
         this.packingList = packingList;
         final Item item = getTargetItem();
-        packingList.packItem(item);
+        packingList.packItem(item, packQuantity);
         Ui.printToUser(String.format(MSG_SUCCESS_PACK, item));
     }
 
diff --git a/src/main/java/bagpacker/commands/UnpackCommand.java b/src/main/java/bagpacker/commands/UnpackCommand.java
deleted file mode 100644
index 5e35bf0..0000000
--- a/src/main/java/bagpacker/commands/UnpackCommand.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package bagpacker.commands;
-
-import bagpacker.iohandler.Ui;
-import bagpacker.packingfunc.Item;
-import bagpacker.packingfunc.PackingList;
-
-public class UnpackCommand extends Command {
-
-    public static final String MSG_SUCCESS_UNPACK = "Item unpacked: %s";
-    public static final String HELP_MSG = "unpack : Marks an item as unpacked in the packing list.\n" +
-            "\tExample: unpack 1 of 2\n" +
-            "\tMeaning: unpacks 1 quantity of the second item in the packing list";
-
-
-    public UnpackCommand(int targetIndex) {
-        super(targetIndex);
-        assert (targetIndex >= 1 & targetIndex <= PackingList.getItemList().size()):
-                "Unpack Command Target index is out of bounds";
-    }
-
-    @Override
-    public void execute(PackingList packingList) {
-        this.packingList = packingList;
-        final Item item = getTargetItem();
-        packingList.unpackItem(item);
-        Ui.printToUser(String.format(MSG_SUCCESS_UNPACK, item));
-    }
-
-}
diff --git a/src/main/java/bagpacker/exception/InvalidIndexException.java b/src/main/java/bagpacker/exception/InvalidIndexException.java
index c67a800..61268b2 100644
--- a/src/main/java/bagpacker/exception/InvalidIndexException.java
+++ b/src/main/java/bagpacker/exception/InvalidIndexException.java
@@ -1,6 +1,4 @@
 package bagpacker.exception;
 
-
-
-public class InvalidIndexException extends Exception{
+public class InvalidIndexException extends Exception {
 }
diff --git a/src/main/java/bagpacker/exception/InvalidVariablesException.java b/src/main/java/bagpacker/exception/InvalidVariablesException.java
index 428e531..163e70c 100644
--- a/src/main/java/bagpacker/exception/InvalidVariablesException.java
+++ b/src/main/java/bagpacker/exception/InvalidVariablesException.java
@@ -1,6 +1,4 @@
 package bagpacker.exception;
 
-
-
-public class InvalidVariablesException extends Exception{
+public class InvalidVariablesException extends Exception {
 }
diff --git a/src/main/java/bagpacker/iohandler/Parser.java b/src/main/java/bagpacker/iohandler/Parser.java
index 28eed17..cc44aa5 100644
--- a/src/main/java/bagpacker/iohandler/Parser.java
+++ b/src/main/java/bagpacker/iohandler/Parser.java
@@ -1,6 +1,5 @@
 package bagpacker.iohandler;
 
-
 import bagpacker.commands.AddCommand;
 import bagpacker.commands.ByeCommand;
 import bagpacker.commands.Command;
@@ -10,28 +9,32 @@ import bagpacker.commands.HelpCommand;
 import bagpacker.commands.IncorrectCommand;
 import bagpacker.commands.ListCommand;
 import bagpacker.commands.PackCommand;
-import bagpacker.commands.UnpackCommand;
 import bagpacker.exception.EmptyInputException;
 import bagpacker.exception.InvalidIndexException;
 import bagpacker.exception.InvalidVariablesException;
 import bagpacker.packingfunc.Item;
 import bagpacker.packingfunc.PackingList;
 
-import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Scanner;
 
 /**
  * Parser class contains methods to manipulate user input
  */
 public class Parser {
-    private static ArrayList<String> inputStringArray;
+    private static String[] arguments;
     private static String fullInput;
 
     public static void setFullInput(String fullInput) {
         Parser.fullInput = fullInput;
     }
 
+    /**
+     * Returns the user input in String format
+     */
+    public static String getFullInput() {
+        return fullInput;
+    }
+
     /**
      * Returns the user input as in array format
      */
@@ -42,38 +45,40 @@ public class Parser {
     public static void setInputStringArray(String[] inputStringArray) {
         Parser.inputStringArray = new ArrayList<>(Arrays.asList(inputStringArray));
     }
-
+    
     /**
-     * Returns the user input in String format
+     * parses user input into relevant subclasses of Command for execution.
+     * @return command based on user input
      */
-    public static String getFullInput() {
-        return fullInput;
-    }
-
     public static Command parse() {
+        arguments = new String[2];
         String inputLine = "";
         while (inputLine.isEmpty()) {
             try {
-                inputLine = readLine();
+                inputLine = readLine().trim();
             } catch (EmptyInputException e) {
                 Ui.errorMessage("Empty input received",
                         "try to input a command, to view all commands input 'help'");
             }
         }
         setFullInput(inputLine);
-        String[] inputStringList = inputLine.trim().split(" ");
+        String[] inputStringList = inputLine.split(" ");
         setInputStringArray(inputStringList);
-        switch (inputStringList[0]) {
+        switch (getCommand()) {
         case "add":
+            arguments = inputStringList[1].trim().split("/of");
             return createAddObj();
         case "delete":
+            arguments[0] = inputStringList[1].trim();
             return createDeleteObj();
         case "pack":
+            arguments = inputStringList[1].trim().split("/of");
             return createPackObj();
         case "unpack":
+            arguments = inputStringList[1].trim().split("/of");
             return createUnpackObj();
         case "list":
-            return listCommand();
+            return createListObj();
         case "help":
             return createHelpObj();
         case "deletelist":
@@ -81,10 +86,11 @@ public class Parser {
         case "bye":
             return createByeObj();
         default:
-            return new IncorrectCommand("'" + Parser.getCommand() + "' is an invalid User Command",
+            return new IncorrectCommand("'" + inputStringList[0] + "' is an invalid User Command",
                     "input 'help' to receive all valid commands");
         }
     }
+
     /**
      * Reads and returns the full user input from the command line interface
      * - trims the leading and trailing white spaces
@@ -92,7 +98,7 @@ public class Parser {
      * @return inputLine the String input of the user
      * @throws EmptyInputException when user input empty line
      */
-    private static String readLine() throws EmptyInputException {
+    public static String readLine() throws EmptyInputException {
         String inputLine;
         Scanner in = new Scanner(System.in);
         inputLine = in.nextLine().trim();
@@ -102,36 +108,6 @@ public class Parser {
         return inputLine;
     }
 
-    /**
-     * Returns the user command in lower case
-     *
-     * @return command from user
-     */
-    public static String getCommand() {
-        String command = getInputStringArray().get(0).toLowerCase();
-        return command;
-    }
-
-    /**
-     * Returns a string which represents the name of the item from the user input
-     *
-     * @return inputVariables which is the name of the item
-     * @throws InvalidVariablesException when the item name cannot be found
-     */
-    public static String getItemName() throws InvalidVariablesException {
-        String itemName;
-        if (inputStringArray.size() <= 1) {
-            throw new InvalidVariablesException();
-        }
-        try {
-            int itemIndStart = fullInput.indexOf(" ") + 1;
-            itemName = fullInput.substring(itemIndStart);
-        } catch (IndexOutOfBoundsException e) {
-            throw new InvalidVariablesException();
-        }
-        return itemName;
-    }
-
     /**
      * Returns a string which represents the index of the item from the user input
      *
@@ -141,7 +117,7 @@ public class Parser {
     public static String getItemIndex() throws InvalidIndexException {
         String inputIndex;
         int itemIndex;
-        if (inputStringArray.size() != 2) {
+        if (arguments[0] == null) {
             throw new InvalidIndexException();
         }
         try {
@@ -156,59 +132,37 @@ public class Parser {
         }
         return inputIndex;
     }
+
     /**
      * Returns a string which represents the relevant variable depending on the command
      * - "add" will return the item name
      * - "delete", "pack", "unpack" will return item index
      *
-     * @param command used to determine the type of variable to return
      * @return itemVariable which is the index OR name of the item in packing list
      * @throws InvalidIndexException when the item index is not valid
      */
-    public static String getVariable(String command) throws InvalidVariablesException, InvalidIndexException {
+    public static String getVariable() throws InvalidIndexException {
         String itemVariable;
         try {
-            if (command.equals("add")) {
-                itemVariable = getItemName();
-            } else {
-                itemVariable = getItemIndex();
-            }
-        } catch (InvalidVariablesException e) {
-            throw new InvalidVariablesException();
+            itemVariable = getItemIndex();
         } catch (InvalidIndexException e) {
             throw new InvalidIndexException();
         }
         return itemVariable;
     }
 
-
-    /**
-     * Returns the user item description
-     */
-    public static String getItemDescrip() {
-        //String[] itemArray = Arrays.copyOfRange(getInputStringArray(),1,getInputStringArray().length);
-        int indexItemName = getFullInput().indexOf("i/") + 2;
-        return getFullInput().substring(indexItemName).trim();
+    public static String[] getQuantityAndDescription() {
+        String[] itemQuantityAndDescription = new String[2];
+        itemQuantityAndDescription[0] = arguments[0];
+        itemQuantityAndDescription[1] = arguments[1];
+        return itemQuantityAndDescription;
     }
 
-
-    /**
-     * Attempts to create AddCommand object to be executed where it is called from
-     *
-     * @return AddCommand the command to be executed to add an item to the packing list, else
-     *      an IncorrectCommand is created to be executed
-     */
     public static Command createAddObj() {
-        try {
-            String itemName = getVariable("add");
-            return new AddCommand(new Item(itemName));
-        } catch (InvalidVariablesException e) {
-            return new IncorrectCommand("Invalid Item Name",
-                    "try to input a name (word(s)) to be added into the list");
-        } catch (InvalidIndexException e) {
-            return new IncorrectCommand("Invalid Item Index",
-                    "try to input an integer number between 1 and " + PackingList.getItemList().size());
-        }
+        String[] quantityAndDescription = getQuantityAndDescription();
+        int itemQuantity = Integer.parseInt((quantityAndDescription[0]).trim());
+        String itemDescription = quantityAndDescription[1].trim();
+        return new AddCommand(new Item(itemQuantity, itemDescription));
     }
 
     /**
@@ -219,11 +173,8 @@ public class Parser {
      */
     public static Command createDeleteObj() {
         try {
-            String itemIndex = getVariable("delete");
+            String itemIndex = getVariable();
             return new DeleteCommand(Integer.parseInt(itemIndex));
-        } catch (InvalidVariablesException e) {
-            return new IncorrectCommand("Invalid Item Name",
-                    "Try to input a name (word(s)) to be added into the list");
         } catch (InvalidIndexException e) {
             if (PackingList.getItemList().size() == 0) {
                 return new IncorrectCommand("Invalid Item Index",
@@ -235,6 +186,19 @@ public class Parser {
         }
     }
 
+    public static int[] getQuantityAndIndex() throws InvalidVariablesException, InvalidIndexException {
+        int[] itemQuantityAndIndex = new int[2];
+        try {
+            itemQuantityAndIndex[0] = Integer.parseInt(arguments[0].trim());
+            itemQuantityAndIndex[1] = Integer.parseInt(arguments[1].trim());
+        } catch (IndexOutOfBoundsException e) {
+            throw new InvalidVariablesException();
+        } catch (NumberFormatException e) {
+            throw new InvalidIndexException();
+        }
+        return itemQuantityAndIndex;
+    }
+
     /**
      * Attempts to create PackCommand object to be executed where it is called from
      *
@@ -243,8 +207,10 @@ public class Parser {
      */
     public static Command createPackObj() {
         try {
-            String itemIndex = getVariable("pack");
-            return new PackCommand(Integer.parseInt(itemIndex));
+            int[] quantityAndIndex = getQuantityAndIndex();
+            int itemQuantity = quantityAndIndex[0];
+            int itemIndex = quantityAndIndex[1];
+            return new PackCommand(itemQuantity, itemIndex);
         } catch (InvalidVariablesException e) {
             return new IncorrectCommand("Invalid Item Name",
                     "try to input a name (word(s)) to be added into the list");
@@ -259,7 +225,6 @@ public class Parser {
         }
     }
 
-
     /**
      * Attempts to create UnpackCommand object to be executed where it is called from
      *
@@ -268,8 +233,10 @@ public class Parser {
      */
     public static Command createUnpackObj() {
         try {
-            String itemIndex = getVariable("unpack");
-            return new UnpackCommand(Integer.parseInt(itemIndex));
+            int[] quantityAndIndex = getQuantityAndIndex();
+            int itemQuantity = -1 * quantityAndIndex[0];
+            int itemIndex = quantityAndIndex[1];
+            return new PackCommand(itemQuantity, itemIndex);
         } catch (InvalidVariablesException e) {
             return new IncorrectCommand("Invalid Item Name",
                     "try to input a name (word(s)) to be added into the list");
@@ -284,7 +251,7 @@ public class Parser {
         }
     }
 
-    public static Command listCommand() {
+    public static Command createListObj() {
         return new ListCommand();
     }
 
diff --git a/src/main/java/bagpacker/iohandler/Storage.java b/src/main/java/bagpacker/iohandler/Storage.java
index 212fefb..5af85eb 100644
--- a/src/main/java/bagpacker/iohandler/Storage.java
+++ b/src/main/java/bagpacker/iohandler/Storage.java
@@ -3,12 +3,9 @@ package bagpacker.iohandler;
 import bagpacker.packingfunc.Item;
 import bagpacker.packingfunc.PackingList;
 
-import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Scanner;
 
 /**
  * Storage class contains methods to save and retrieve saved packing list in txt file
@@ -17,17 +14,19 @@ public class Storage {
 
     public static ArrayList<Item> packingList = new ArrayList<>();
     private static final String FILE_PATH = "packingList.txt";
-    public static void load() throws FileNotFoundException {
-        Scanner reader = new Scanner(new File(FILE_PATH));
-        String line;
-        while (reader.hasNext()) {
-            line = reader.nextLine();
-            boolean isPacked = line.charAt(1) == 'X';
-            String itemDesc = line.substring(4);
-            Item item = new Item(itemDesc, isPacked);
-            PackingList.getItemList().add(item);
-        }
-    }
+
+    //    to be edited by @coregano
+    //    public static void load() throws FileNotFoundException {
+    //        Scanner reader = new Scanner(new File(FILE_PATH));
+    //        String line;
+    //        while (reader.hasNext()) {
+    //            line = reader.nextLine();
+    //            boolean isPacked = line.charAt(1) == 'X';
+    //            String itemDesc = line.substring(4);
+    //            Item item = new Item(itemDesc, isPacked);
+    //            PackingList.getItemList().add(item);
+    //        }
+    //    }
 
     public static void save() {
         try {
diff --git a/src/main/java/bagpacker/iohandler/Ui.java b/src/main/java/bagpacker/iohandler/Ui.java
index 4b77544..9088c6d 100644
--- a/src/main/java/bagpacker/iohandler/Ui.java
+++ b/src/main/java/bagpacker/iohandler/Ui.java
@@ -5,7 +5,6 @@ import bagpacker.commands.ByeCommand;
 import bagpacker.commands.DeleteCommand;
 import bagpacker.commands.ListCommand;
 import bagpacker.commands.PackCommand;
-import bagpacker.commands.UnpackCommand;
 
 /**
  * Ui class contains methods to print messages to user interface on Command Line Interface
@@ -66,8 +65,7 @@ public class Ui {
         System.out.println("2. " + DeleteCommand.HELP_MSG);
         System.out.println("3. " + ListCommand.HELP_MSG);
         System.out.println("4. " + PackCommand.HELP_MSG);
-        System.out.println("5. " + UnpackCommand.HELP_MSG);
-        System.out.println("6. " + ByeCommand.HELP_MSG);
+        System.out.println("5. " + ByeCommand.HELP_MSG);
         printLine();
     }
 
diff --git a/src/main/java/bagpacker/packingfunc/Item.java b/src/main/java/bagpacker/packingfunc/Item.java
index 2249ccc..636a05c 100644
--- a/src/main/java/bagpacker/packingfunc/Item.java
+++ b/src/main/java/bagpacker/packingfunc/Item.java
@@ -1,41 +1,29 @@
 package bagpacker.packingfunc;
+
 /**
  * Item class used to store information about item
  * Items to be packed can be saved in PackingList class
  */
 public class Item {
     private String itemName;
-    private boolean isPacked;
-    private String packIcon = " ";
-    public Item(String description) {
-        this.itemName = description;
-        isPacked = false;
-    }
-    public Item(String description, boolean isPacked) {
+    private int packedQuantity;
+    private int totalQuantity;
+
+    public Item(int quantity, String description) {
         this.itemName = description;
-        this.isPacked = isPacked;
-    }
-    public void setPackIcon() {
-        if (this.isPacked) {
-            this.packIcon = "X";
-        } else {
-            this.packIcon = " ";
-        }
+        packedQuantity = 0;
+        totalQuantity = quantity;
     }
 
     public String getItemName() {
         return itemName;
     }
 
-    public boolean getIsPacked() {
-        return isPacked;
-    }
-    public void setPacked(boolean packed) {
-        isPacked = packed;
-        setPackIcon();
+    public void setPacked(int quantity) {
+        this.packedQuantity += quantity;
     }
 
     public String toString() {
-        return "[" + this.packIcon + "] " + this.getItemName();
+        return "[" + packedQuantity + "/" + totalQuantity + "] " + this.getItemName();
     }
 }
diff --git a/src/main/java/bagpacker/packingfunc/PackingList.java b/src/main/java/bagpacker/packingfunc/PackingList.java
index fc9949c..29b3145 100644
--- a/src/main/java/bagpacker/packingfunc/PackingList.java
+++ b/src/main/java/bagpacker/packingfunc/PackingList.java
@@ -7,10 +7,8 @@ import java.util.ArrayList;
  */
 public class PackingList {
 
-
     private static ArrayList<Item> itemList = new ArrayList<>();
 
-    private static int targetIndex = -1;
     public static void setItemList(ArrayList<Item> itemList) {
         PackingList.itemList = itemList;
     }
@@ -23,6 +21,7 @@ public class PackingList {
     public static ArrayList<Item> getItemList() {
         return itemList;
     }
+
     /**
      * Adds an item to the list.
      */
@@ -38,17 +37,17 @@ public class PackingList {
     }
 
     /**
-     * Marks an item as packed in the list.
+     * Adds quantity to quantity already packed
      */
-    public void packItem(Item toPack) {
-        toPack.setPacked(true);
+    public void packItem(Item toPack, int quantity) {
+        toPack.setPacked(quantity);
     }
 
     /**
-     * Marks an item as unpacked in the list.
+     * Subtracts quantity from quantity already packed
      */
-    public void unpackItem(Item toPack) {
-        toPack.setPacked(false);
+    public void unpackItem(Item toPack, int quantity) {
+        toPack.setPacked(quantity);
     }
 
     public static Item get(int targetIndex) {
@@ -58,9 +57,8 @@ public class PackingList {
     /**
      * Returns size of packing list
      */
-    public int size(){
+    public int size() {
         return itemList.size();
     }
 
-
 }
diff --git a/src/test/java/bagpacker/iohandlertest/ParserTest.java b/src/test/java/bagpacker/iohandlertest/ParserTest.java
index 2f28ce9..8cf3f21 100644
--- a/src/test/java/bagpacker/iohandlertest/ParserTest.java
+++ b/src/test/java/bagpacker/iohandlertest/ParserTest.java
@@ -1,14 +1,154 @@
 package bagpacker.iohandlertest;
+
+import bagpacker.commands.AddCommand;
+import bagpacker.commands.ByeCommand;
+import bagpacker.commands.DeleteCommand;
+import bagpacker.commands.HelpCommand;
+import bagpacker.commands.IncorrectCommand;
+import bagpacker.commands.ListCommand;
+import bagpacker.commands.PackCommand;
+import bagpacker.commands.UnpackCommand;
+import bagpacker.exception.EmptyInputException;
+import bagpacker.exception.InvalidIndexException;
+import bagpacker.exception.InvalidVariablesException;
+import bagpacker.iohandler.Parser;
+import bagpacker.packingfunc.PackingList;
 import org.junit.jupiter.api.Test;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**
  * ParserTest to test Parser Class
  */
 public class ParserTest {
     @Test
-    public void sampleTest() {
-        assertTrue(true);
+    public void fullInputTest() {
+        String userInput = "  add this item  ";
+        InputStream inStream = new ByteArrayInputStream(userInput.getBytes());
+        System.setIn(inStream);
+        Parser.parse();
+        assertEquals(userInput.trim(), Parser.getFullInput());
+    }
+
+    @Test
+    public void addCommandTest() {
+        String userInput = "  add this item  ";
+        InputStream inStream = new ByteArrayInputStream(userInput.getBytes());
+        System.setIn(inStream);
+        assertEquals(AddCommand.class, Parser.parse().getClass());
+    }
+
+    @Test
+    public void emptyInputTest() {
+        String userInput = "   ";
+        InputStream inStream = new ByteArrayInputStream(userInput.getBytes());
+        System.setIn(inStream);
+        Exception exception = assertThrows(EmptyInputException.class, Parser::readLine);
+        assertEquals(EmptyInputException.class, exception.getClass());
+    }
+
+    @Test
+    public void addVariableTest() throws InvalidIndexException, InvalidVariablesException {
+        String userInput = "  add this item 1 ";
+        InputStream inStream = new ByteArrayInputStream(userInput.getBytes());
+        System.setIn(inStream);
+        Parser.parse();
+        assertEquals("this item 1", Parser.getVariable(Parser.getCommand()));
+    }
+
+    @Test
+    public void deleteCommandTest() {
+        String userInput1 = "  add this item  ";
+        String userInput2 = "  delete 1 ";
+        InputStream inStream = new ByteArrayInputStream(userInput1.getBytes());
+        System.setIn(inStream);
+        PackingList dummyPackingList = new PackingList();
+        Parser.parse().execute(dummyPackingList);
+        inStream = new ByteArrayInputStream(userInput2.getBytes());
+        System.setIn(inStream);
+        assertEquals(DeleteCommand.class, Parser.parse().getClass());
+    }
+
+    @Test
+    public void packCommandTest() {
+        String userInput1 = "  add this item  ";
+        String userInput2 = "  pack 1 ";
+        InputStream inStream = new ByteArrayInputStream(userInput1.getBytes());
+        System.setIn(inStream);
+        PackingList dummyPackingList = new PackingList();
+        Parser.parse().execute(dummyPackingList);
+        inStream = new ByteArrayInputStream(userInput2.getBytes());
+        System.setIn(inStream);
+        assertEquals(PackCommand.class, Parser.parse().getClass());
+    }
+
+    @Test
+    public void unpackCommandTest() {
+        String userInput1 = "  add this item  ";
+        String userInput2 = "  pack 1 ";
+        String userInput3 = "  Unpack 1 ";
+        PackingList dummyPackingList = new PackingList();
+
+        InputStream inStream = new ByteArrayInputStream(userInput1.getBytes());
+        System.setIn(inStream);
+        Parser.parse().execute(dummyPackingList);
+
+        inStream = new ByteArrayInputStream(userInput2.getBytes());
+        System.setIn(inStream);
+        Parser.parse().execute(dummyPackingList);
+
+        inStream = new ByteArrayInputStream(userInput3.getBytes());
+        System.setIn(inStream);
+        assertEquals(UnpackCommand.class, Parser.parse().getClass());
+    }
+
+    @Test
+    public void listCommandTest() {
+        String userInput1 = "  add this item  ";
+        String userInput2 = "  lIST ";
+        PackingList dummyPackingList = new PackingList();
+
+        InputStream inStream = new ByteArrayInputStream(userInput1.getBytes());
+        System.setIn(inStream);
+        Parser.parse().execute(dummyPackingList);
+
+        inStream = new ByteArrayInputStream(userInput2.getBytes());
+        System.setIn(inStream);
+
+        assertEquals(ListCommand.class, Parser.parse().getClass());
+    }
+    @Test
+    public void helpCommandTest() {
+        String userInput1 = "  HelP  ";
+
+        InputStream inStream = new ByteArrayInputStream(userInput1.getBytes());
+        System.setIn(inStream);
+
+        assertEquals(HelpCommand.class, Parser.parse().getClass());
+    }
+
+    @Test
+    public void byeCommandTest() {
+        String userInput1 = "  byE  ";
+
+        InputStream inStream = new ByteArrayInputStream(userInput1.getBytes());
+        System.setIn(inStream);
+
+        assertEquals(ByeCommand.class, Parser.parse().getClass());
     }
 
+    @Test
+    public void invalidCommandTest() {
+        String userInput1 = " thisIsNOTaVALID command  ";
+
+        InputStream inStream = new ByteArrayInputStream(userInput1.getBytes());
+        System.setIn(inStream);
+
+        assertEquals(IncorrectCommand.class, Parser.parse().getClass());
+    }
 }
+
diff --git a/src/test/java/bagpacker/packingfunctest/CommandsTest.java b/src/test/java/bagpacker/packingfunctest/CommandsTest.java
index 88ef7ab..db288dc 100644
--- a/src/test/java/bagpacker/packingfunctest/CommandsTest.java
+++ b/src/test/java/bagpacker/packingfunctest/CommandsTest.java
@@ -1,10 +1,11 @@
 package bagpacker.packingfunctest;
-
+/*
 import bagpacker.commands.AddCommand;
 import bagpacker.commands.Command;
+//import bagpacker.packingfunc.Item;
 import bagpacker.packingfunc.Item;
 import bagpacker.packingfunc.PackingList;
-import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Assertions;*/
 import org.junit.jupiter.api.Test;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -17,11 +18,10 @@ public class CommandsTest {
         assertTrue(true);
     }
 
-    @Test
+    /*@Test
     public void testAddCommand() {
         PackingList packingList = new PackingList();
-        Item item = new Item("toothbrush");
-        Command addCommand = new AddCommand(item);
+        Command addCommand = new AddCommand(new Item(1, "toothbrush"));
         addCommand.execute(packingList);
 
         // Expect a Packinglist with a toothbrush item in first index
@@ -29,13 +29,13 @@ public class CommandsTest {
         Assertions.assertNotEquals("tooth", packingList.get(0).getItemName());
 
         // Expect second index item in the packing list to be toothpaste
-        Item itemTwo = new Item("toothpaste");
-        addCommand = new AddCommand(itemTwo);
-        addCommand.execute(packingList);
+
+        addObj = new AddCommand(1, "toothpaste");
+        addObj.execute(packingList);
 
         Assertions.assertEquals("toothpaste",packingList.get(1).getItemName());
         Assertions.assertNotEquals("toothbrush", packingList.get(1).getItemName());
 
-    }
+    }*/
 
 }
